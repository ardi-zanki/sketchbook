@import 'normalize.css' layer(normalize);

@layer normalize, base, demo;

@layer demo {
  .grid {
    display: grid;
    width: calc(50vw + 20px);
    gap: 5px;
    max-width: calc(100vw - 2rem);
    grid-template-columns: repeat(auto-fill, minmax(10vw, 1fr));
    > div {
      aspect-ratio: 1;
      background: hsl(0 0% 20%);
      color: hsl(0 0% 90%);
      container-type: inline-size;
      display: grid;
      place-items: center;

      span {
        font-size: 25cqi;
      }
    }
  }
  ::view-transition-group(*) {
    animation-duration: 1s;
    animation-timing-function: linear(
      0 0%,
      0.0028 14.69%,
      -0.0002 20.17%,
      -0.0097 24.57%,
      -0.0389 31.91%,
      -0.0443 34.46%,
      -0.0365 37.14%,
      -0.0104 39.42%,
      0.063 42.36%,
      0.1849 45.15%,
      0.716 53.16%,
      0.8682 55.92%,
      0.9733 58.84%,
      1.007 60.38%,
      1.0295 62.03%,
      1.0414 63.79%,
      1.0442 65.82%,
      1.0385 68.22%,
      1.0101 75.3%,
      1.0002 79.81%,
      0.9972 85.3%,
      1 100%
    );
  }

  ::view-transition-group(root) {
    animation-duration: 0.5s;
    animation-timing-function: ease;
  }
}

@layer base {
  :root {
    --font-size-min: 16;
    --font-size-max: 20;
    --font-ratio-min: 1.2;
    --font-ratio-max: 1.33;
    --font-width-min: 375;
    --font-width-max: 1500;
  }

  html {
    color-scheme: light dark;
  }

  [data-theme='light'] {
    color-scheme: light only;
  }

  [data-theme='dark'] {
    color-scheme: dark only;
  }

  :where(.fluid) {
    --fluid-min: calc(
      var(--font-size-min) * pow(var(--font-ratio-min), var(--font-level, 0))
    );
    --fluid-max: calc(
      var(--font-size-max) * pow(var(--font-ratio-max), var(--font-level, 0))
    );
    --fluid-preferred: calc(
      (var(--fluid-max) - var(--fluid-min)) /
        (var(--font-width-max) - var(--font-width-min))
    );
    --fluid-type: clamp(
      (var(--fluid-min) / 16) * 1rem,
      ((var(--fluid-min) / 16) * 1rem) -
        (((var(--fluid-preferred) * var(--font-width-min)) / 16) * 1rem) +
        (var(--fluid-preferred) * var(--variable-unit, 100vi)),
      (var(--fluid-max) / 16) * 1rem
    );
    font-size: var(--fluid-type);
  }

  *,
  *:after,
  *:before {
    box-sizing: border-box;
  }

  body {
    display: grid;
    place-items: center;
    min-height: 100vh;
    font-family: 'SF Pro Text', 'SF Pro Icons', 'AOS Icons', 'Helvetica Neue',
      Helvetica, Arial, sans-serif, system-ui;
  }

  body::before {
    --size: 45px;
    --line: color-mix(in lch, canvasText, transparent 70%);
    content: '';
    height: 100vh;
    width: 100vw;
    position: fixed;
    background: linear-gradient(
          90deg,
          var(--line) 1px,
          transparent 1px var(--size)
        )
        50% 50% / var(--size) var(--size),
      linear-gradient(var(--line) 1px, transparent 1px var(--size)) 50% 50% /
        var(--size) var(--size);
    mask: linear-gradient(-20deg, transparent 50%, white);
    top: 0;
    transform-style: flat;
    pointer-events: none;
    z-index: -1;
  }

  .bear-link {
    color: canvasText;
    position: fixed;
    top: 1rem;
    left: 1rem;
    width: 48px;
    aspect-ratio: 1;
    display: grid;
    place-items: center;
    opacity: 0.8;
  }

  :where(.x-link, .bear-link):is(:hover, :focus-visible) {
    opacity: 1;
  }

  .bear-link svg {
    width: 75%;
  }

  /* Utilities */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
}

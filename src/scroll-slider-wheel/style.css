@import 'normalize.css' layer(normalize);

@layer normalize, base, demo, slider, animation;

@layer animation {
  @supports (animation-timeline: scroll()) {
    :root {
      --transition: 0.625s;
      --ease: linear(
        0 0%,
        0.5007 7.21%,
        0.7803 12.29%,
        0.8883 14.93%,
        0.9724 17.63%,
        1.0343 20.44%,
        1.0754 23.44%,
        1.0898 25.22%,
        1.0984 27.11%,
        1.1014 29.15%,
        1.0989 31.4%,
        1.0854 35.23%,
        1.0196 48.86%,
        1.0043 54.06%,
        0.9956 59.6%,
        0.9925 68.11%,
        1 100%
      );
      timeline-scope: --thumb;
    }

    .wheels {
      position: absolute;
      bottom: anchor(--i top);
      left: anchor(--t center);
      translate: -50% -10rem;
      display: grid;
      grid-template-columns:
        min(1rem, round(down, var(--value) / 100, 1) * 1rem) min(
          1rem,
          round(down, var(--value) / 10, 1) * 1rem
        )
        1rem;
      grid-template-columns: repeat(3, 1fr);
      align-content: center;
      height: 3rem;
      transition: grid-template-columns 0.2s;

      /* mask: linear-gradient(
        #0000,
        #000 calc(50% - 0.75rem) calc(50% + 0.75rem),
        #0000
      ); */
    }

    .slider__wheel {
      font-size: 1.5rem;
      width: 1rem;
      height: 2rem;
      transform-style: preserve-3d;
      transition: transform 0.5s var(--ease);
    }

    .slider__wheel:nth-of-type(1) {
      transform: rotateX(calc(round(down, var(--value) / 100, 1) * -36deg));
      span {
        /* opacity: min(1, round(down, var(--value) / 100, 1)); */
        transition: opacity 0.2s ease-out;
      }
    }
    .slider__wheel:nth-of-type(2) {
      /* need to offset how many times round the 10s go */
      /* If you had a max of 240, that would be 24. Divide max by 10 after rounding down */
      /* Times by the value then the -36deg */
      /* Gonna have to come back in here to account for the min value I feel... */

      /* This is what you were doing... */
      --val: round(var(--value), 1);
      transform: rotateX(calc(round(down, var(--val) / 10, 1) * -36deg));

      span {
        /* opacity: min(1, round(down, var(--value) / 10, 1)); */
        transition: opacity 0.2s ease-out;
      }
    }
    .slider__wheel:nth-of-type(3) {
      --rotation: calc((var(--value) / var(--max)) * (var(--max) * -36));
      transform: rotateX(calc(var(--rotation) * 1deg));
    }

    .slider__wheel span {
      --radius: calc((var(--character-width, 2) / sin(36deg)) * -1rem);
      transform: translate(-50%, -50%) rotateX(calc(36deg * var(--index)))
        translateZ(calc(var(--radius, -5ch) * -1));
      display: grid;
      place-items: center;
      position: absolute;
      top: 50%;
      left: 50%;
      backface-visibility: hidden;
    }

    .slider {
      position: relative;
    }

    @property --value {
      initial-value: 0;
      inherits: true;
      syntax: '<number>';
    }

    .slider::after {
      content: 'Debug: ' counter(progress);
      counter-set: progress var(--value);
      position: fixed;
      top: 100px;
      left: 1rem;
    }

    .slider {
      timeline-scope: --thumb;
      animation: progress both linear;
      animation-direction: reverse;
      animation-timeline: --thumb;
      animation-range: contain;
    }
    @keyframes progress {
      to {
        --value: 100;
      }
    }
    .slider input {
      overflow: hidden;
      anchor-name: --i;
    }
    .slider ::-webkit-slider-thumb {
      view-timeline: --thumb inline;
      anchor-name: --t;
    }

    .slider__indicator,
    .slider__fill::after,
    .track {
      transition: translate var(--transition) var(--ease);
    }

    .slider__indicator {
      translate: calc((var(--value) / 100 * (100cqi - 100%)) - 0%) -50%;
    }
    .slider__fill::after {
      /* translate: calc(var(--value) * 1cqi) 0%; */
    }
    .track {
      /* translate: 0 calc(var(--value) * (2.625rem * 10)); */
    }
  }
}

@layer slider {
  :root {
    --width: 400;
  }
  .slider {
    --height: 2.75rem;
    display: flex;
    /* gap: 0.875rem; */
    border-radius: 12px;
    background: color-mix(in hsl, canvasText, canvas 90%);
    color: canvasText;
    /* padding: 0 1.125rem; */
    width: calc(var(--width) * 1px);
    max-width: calc(100vw - 2rem);
    align-items: center;
  }

  .slider__track {
    --gradient: radial-gradient(
      0.5rem 0.5rem at calc(0.5rem) 50%,
      hsl(0 0% 25%) calc(0.5rem - 3px),
      transparent calc(0.5rem - 3px)
    );
    flex: 1;
    height: 0.5rem;
    position: relative;
    container-type: inline-size;
  }

  .slider__fill {
    /* height: 0.875rem; */
    height: 100%;
    border-radius: 12px;
    position: absolute;
    left: 0;
    width: 100%;
    top: 50%;
    translate: 0 -50%;
    clip-path: inset(0 0 0 0 round 12px);
    pointer-events: none;
  }

  .slider__fill::after {
    content: '';
    width: 120%;
    height: 100%;
    position: absolute;
    left: 0;
    top: 0;
    background: color-mix(in hsl, canvasText, canvas);
    clip-path: inset(0 0 0 0 round 12px);
    transform: translateX(-100%);
  }

  .slider__indicator {
    pointer-events: none;
    height: 1.75rem;
    box-shadow: 0 0 4px -2px canvasText;
    aspect-ratio: 1;
    border-radius: 50%;
    background: color-mix(in hsl, canvasText, canvas);
    position: absolute;
    top: 50%;
    left: 0;
    translate: calc(((100cqi - 0%) / 10) * 10) -50%;
    /* outline: 2px solid hsl(0 0% 50%); */
  }

  .slider__label {
    font-size: 13px;
    font-weight: 600;
  }

  .slider__track input {
    width: 100%;
  }

  .slider [type='range'] {
    opacity: 1;
    height: var(--height);
    transition: translate var(--transition) var(--ease),
      opacity var(--transition) var(--ease);
  }

  .slider:has(:focus-visible) {
    outline: 4px solid red;
    outline-offset: 2px;
  }

  .slider [type='range']:hover {
    cursor: -webkit-grab;
  }

  .slider [type='range']:active {
    cursor: -webkit-grabbing;
  }

  .slider [type='range']::-webkit-slider-thumb {
    height: var(--height);
    width: 48px;
    margin-top: unset;
    opacity: 1;
  }

  .slider [type='range']::-webkit-slider-runnable-track {
    height: var(--height);
    background: hsl(10 0% 50% / 0.5);
  }

  .slider [type='range']::-moz-range-track {
    height: var(--height);
    background: hsl(10 0% 50% / 0.5);
  }

  /* [data-reveal='true'] .slider [type='range'] { */
  .slider [type='range'] {
    opacity: 1;
    translate: 0 -150%;
  }
  [data-reveal='true'] .slider [type='range']::-webkit-slider-thumb {
    opacity: 1;
    height: auto;
    margin-top: unset;
    width: unset;
  }

  [data-reveal='true'] .slider [type='range']::-webkit-slider-runnable-track {
    height: unset;
  }

  [data-reveal='true'] .slider [type='range']::-moz-range-track {
    height: unset;
  }
}

@layer base {
  html {
    color-scheme: light dark;
  }

  [data-theme='dark'] {
    color-scheme: dark;
  }

  [data-theme='light'] {
    color-scheme: light;
  }

  :root {
    --font-size-min: 16;
    --font-size-max: 20;
    --font-ratio-min: 1.2;
    --font-ratio-max: 1.33;
    --font-width-min: 375;
    --font-width-max: 1500;
  }

  :where(.fluid) {
    --fluid-min: calc(
      var(--font-size-min) * pow(var(--font-ratio-min), var(--font-level, 0))
    );
    --fluid-max: calc(
      var(--font-size-max) * pow(var(--font-ratio-max), var(--font-level, 0))
    );
    --fluid-preferred: calc(
      (var(--fluid-max) - var(--fluid-min)) /
        (var(--font-width-max) - var(--font-width-min))
    );
    --fluid-type: clamp(
      (var(--fluid-min) / 16) * 1rem,
      ((var(--fluid-min) / 16) * 1rem) -
        (((var(--fluid-preferred) * var(--font-width-min)) / 16) * 1rem) +
        (var(--fluid-preferred) * var(--variable-unit, 100vi)),
      (var(--fluid-max) / 16) * 1rem
    );
    font-size: var(--fluid-type);
  }

  *,
  *:after,
  *:before {
    box-sizing: border-box;
  }

  body {
    display: grid;
    place-items: center;
    min-height: 100vh;
    font-family: 'SF Pro Text', 'SF Pro Icons', 'AOS Icons', 'Helvetica Neue',
      Helvetica, Arial, sans-serif, system-ui;
  }

  body::before {
    --size: 45px;
    --line: color-mix(in lch, canvasText, transparent 70%);
    content: '';
    height: 100vh;
    width: 100vw;
    position: fixed;
    background: linear-gradient(
          90deg,
          var(--line) 1px,
          transparent 1px var(--size)
        )
        50% 50% / var(--size) var(--size),
      linear-gradient(var(--line) 1px, transparent 1px var(--size)) 50% 50% /
        var(--size) var(--size);
    mask: linear-gradient(-20deg, transparent 50%, white);
    top: 0;
    transform-style: flat;
    pointer-events: none;
    z-index: -1;
  }

  .bear-link {
    color: canvasText;
    position: fixed;
    top: 1rem;
    left: 1rem;
    width: 48px;
    aspect-ratio: 1;
    display: grid;
    place-items: center;
    opacity: 0.8;
  }

  :where(.x-link, .bear-link):is(:hover, :focus-visible) {
    opacity: 1;
  }

  .bear-link svg {
    width: 75%;
  }

  /* Utilities */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
}

@import 'normalize.css' layer(normalize);

@layer normalize, base, demo, slider, animation;

@layer animation {
  @supports (animation-timeline: scroll()) {
    :root {
      timeline-scope: --thumb;
    }
    .slider {
      timeline-scope: --thumb;
      animation: progress both linear;
      animation-direction: reverse;
      animation-timeline: --thumb;
      animation-range: contain;
    }
    .slider ::-webkit-slider-thumb {
      view-timeline: --thumb inline;
    }
    @keyframes progress {
      to {
        --value: calc(var(--max) - var(--min));
      }
    }
  }

  :root {
    --transition: 0.625s;
    --ease: linear(
      0 0%,
      0.5007 7.21%,
      0.7803 12.29%,
      0.8883 14.93%,
      0.9724 17.63%,
      1.0343 20.44%,
      1.0754 23.44%,
      1.0898 25.22%,
      1.0984 27.11%,
      1.1014 29.15%,
      1.0989 31.4%,
      1.0854 35.23%,
      1.0196 48.86%,
      1.0043 54.06%,
      0.9956 59.6%,
      0.9925 68.11%,
      1 100%
    );
  }

  .wheels {
    --val: round(var(--value) + var(--min), 1);
    position: absolute;
    bottom: calc(100% + 0.5rem);
    left: 0;
    pointer-events: none;
    translate: -50% 0;
    display: grid;
    --wheel-width: calc(var(--label) * 0.65rem);
    grid-template-columns:
      min(
        var(--wheel-width),
        round(down, var(--val) / 100, 1) * var(--wheel-width)
      )
      min(
        var(--wheel-width),
        round(down, var(--val) / 10, 1) * var(--wheel-width)
      )
      var(--wheel-width);
    /* grid-template-columns: repeat(3, 1fr); */
    align-content: center;
    height: calc(var(--label) * 2rem);
    transition: grid-template-columns 0.2s;
    font-weight: 600;

    mask: linear-gradient(
      #0000 0.25rem,
      #000 calc(50% - 0.35rem) calc(50% + 0.35rem),
      #0000 calc(100% - 0.25rem)
    );
  }

  .slider__label {
    position: absolute;
    left: 0;
    top: calc(100% + 1rem);
    color: color-mix(in hsl, currentColor, #0000 25%);
    opacity: var(--labelled, 0);
    transition: opacity 0.2s;
  }

  [data-labelled='true'] {
    --labelled: 1;
  }

  [data-fixed='true'] .slider .wheels {
    translate: 0 0;
  }
  [data-labelled='true'][data-fixed='true'] .slider .wheels {
    left: unset;
    right: 0;
  }
  [data-labelled='true'][data-fixed='true'] .slider .slider__label {
    top: unset;
    bottom: calc(100% + 1rem);
  }

  .slider__wheel {
    font-size: calc(var(--label) * 1rem);
    width: calc(var(--label) * 0.75rem);
    height: calc(var(--label) * 1.25rem);
    transform-style: preserve-3d;
    transition: transform 0.5s var(--ease);
  }

  .slider__wheel:nth-of-type(1) {
    --val: round(var(--value) + var(--min), 1);
    transform: rotateX(calc(round(down, var(--val) / 100, 1) * -36deg));
    span {
      opacity: min(1, round(down, var(--val) / 100, 1));
      transition: opacity 0.2s ease-out;
    }
  }
  .slider__wheel:nth-of-type(2) {
    --val: round(var(--value) + var(--min), 1);
    --rotation: round(down, var(--val) / 10, 1);
    transform: rotateX(calc(var(--rotation) * -36deg));

    span {
      opacity: min(1, round(down, var(--val) / 10, 1));
      transition: opacity 0.2s ease-out;
    }
  }
  .slider__wheel:nth-of-type(3) {
    --min-rotation: calc(var(--min) * -36);
    --rotation: calc((var(--value) / var(--max)) * (var(--max) * -36));
    transform: rotateX(calc((var(--min-rotation) + var(--rotation)) * 1deg));
  }

  .slider__wheel span {
    --radius: calc(
      (var(--character-width, var(--label) * 1.25) / sin(36deg)) * -1rem
    );
    transform: translate(-50%, -50%) rotateX(calc(36deg * var(--index)))
      translateZ(calc(var(--radius, -5ch) * -1));
    display: grid;
    place-items: center;
    position: absolute;
    top: 50%;
    left: 50%;
    backface-visibility: hidden;
  }

  .slider {
    position: relative;
  }

  @property --value {
    initial-value: 0;
    inherits: true;
    syntax: '<number>';
  }

  .slider input {
    overflow: hidden;
    outline-color: transparent;
    outline-width: 0;
    accent-color: red;
  }

  .slider .wheels {
    --progress: calc((var(--value) / (var(--max) - (var(--min)))));
    translate: calc(
        var(--progress) * (100cqi - var(--thumb-size)) - 50% +
          (var(--thumb-size) * 0.5)
      )
      0;
  }
  .slider__indicator {
    translate: calc(
        ((var(--value) / (var(--max) - var(--min))) * (100cqi - 100%)) - 0%
      ) -50%;
  }
  .slider__fill::after {
    translate: calc(
        (var(--value) / (var(--max) - var(--min))) *
          (100cqi - var(--thumb-size))
      )
      0%;
  }

  [data-explode='true'] .wheels {
    transform: translateY(-200%);
    transform-style: preserve-3d;
    mask: unset;
  }

  [data-explode='true'] .wheels::after {
    --radius: calc(
      (var(--character-width, var(--label) * 1.25) / sin(36deg)) * -1rem
    );
    content: '';
    position: absolute;
    inset: 0;
    outline: 2px dashed red;
    transform: translate3d(0, 0, calc(var(--radius) * -1));
  }
  [data-explode='true'] .wheels::before {
    --radius: calc(
      (var(--character-width, var(--label) * 1.25) / sin(36deg)) * -1rem
    );
    content: '';
    position: absolute;
    inset: -100% -120%;
    outline: 2px dashed red;
    background: hsl(0 0% 0% / 0.5);
    transform: translate3d(0, 0, calc(var(--radius) * -0.9));
  }

  [data-explode='true'] .slider__track,
  [data-explode='true'] .slider {
    transform-style: preserve-3d;
  }
  [data-explode='true'] .slider__wheel {
    transform-style: preserve-3d;
  }
  [data-explode='true'] .slider__wheel span {
    transform-style: preserve-3d;
    backface-visibility: visible;
  }
  [data-explode='true'] .slider {
    transform: rotateX(-24deg) rotateY(-40deg);
  }
  [data-explode='true'] .slider [type='range'] {
    transform-style: preserve-3d;
    transform: rotateY(40deg) rotateX(24deg);
  }
}

@layer slider {
  :root {
    --width: 300;
  }

  .slider {
    display: none;
  }

  .slider {
    --thumb-size: 1.25rem;
    --height: 2.75rem;
    --label: 1.25;
    border-radius: 12px;
    width: calc(var(--width) * 1px);
    max-width: calc(100vw - 2rem);
    color: light-dark(
      color-mix(in hsl, canvasText, canvas 22%),
      color-mix(in hsl, canvasText, canvas 8%)
    );
    align-items: center;
  }

  .slider__track {
    --gradient: radial-gradient(
      0.5rem 0.5rem at calc(0.5rem) 50%,
      hsl(0 0% 25%) calc(0.5rem - 3px),
      transparent calc(0.5rem - 3px)
    );
    flex: 1;
    height: 0.5rem;
    position: relative;
    container-type: inline-size;
    background: color-mix(in hsl, canvasText, canvas 90%);
    border-radius: 12px;
  }

  .slider__fill {
    height: 100%;
    border-radius: 12px;
    position: absolute;
    left: 0;
    width: 100%;
    top: 50%;
    translate: 0 -50%;
    clip-path: inset(0 0 0 0 round 12px);
    pointer-events: none;
  }

  .slider__fill::after {
    content: '';
    width: 120%;
    height: 100%;
    position: absolute;
    left: 0;
    top: 0;
    background: light-dark(
      color-mix(in hsl, canvasText, canvas 22%),
      color-mix(in hsl, canvasText, canvas 8%)
    );
    clip-path: inset(0 0 0 0 round 12px);
    transform: translateX(calc(-100% + (var(--thumb-size) * 0.5)));
  }

  .slider__indicator {
    pointer-events: none;
    height: var(--thumb-size);
    box-shadow: 0 0 4px 0px hsl(0 0% 10% / 0.5);
    aspect-ratio: 1;
    border-radius: 50%;
    background: light-dark(
      color-mix(in hsl, canvasText, canvas 22%),
      color-mix(in hsl, canvasText, canvas 8%)
    );
    position: absolute;
    top: 50%;
    left: 0;
    translate: calc(((100cqi - 0%) / 10) * 10) -50%;
  }

  .slider__track input {
    width: 100%;
  }

  .slider [type='range'] {
    opacity: 0;
    height: var(--height);
    transition: translate var(--transition) var(--ease),
      opacity var(--transition) var(--ease);
  }

  [data-explode='false'] .slider:has(:focus-visible) {
    outline: 2px solid red;
    outline-offset: 2px;
  }

  .slider [type='range']:hover {
    cursor: -webkit-grab;
  }

  .slider [type='range']:active {
    cursor: -webkit-grabbing;
  }

  .slider [type='range']::-webkit-slider-thumb {
    height: var(--height);
    width: var(--height);
    margin-top: unset;
    opacity: 1;
  }

  .slider [type='range']::-webkit-slider-runnable-track {
    height: var(--height);
  }

  .slider [type='range']::-moz-range-track {
    height: var(--height);
  }

  .slider [type='range'] {
    opacity: 0;
    position: absolute;
    top: 50%;
    left: 0;
    translate: 0 0;
    margin-top: calc(var(--height) * -0.5);
  }

  :where([data-reveal='true'], [data-explode='true']) .slider [type='range'] {
    opacity: 1;
    translate: 0 100px;
  }

  :where([data-reveal='true'], [data-explode='true'])
    .slider
    [type='range']::-webkit-slider-thumb {
    opacity: 1;
    height: auto;
    margin-top: unset;
    width: unset;
  }

  :where([data-reveal='true'], [data-explode='true'])
    .slider
    [type='range']::-webkit-slider-runnable-track {
    height: unset;
  }

  :where([data-reveal='true'], [data-explode='true'])
    .slider
    [type='range']::-moz-range-track {
    height: unset;
  }
}

@layer base {
  html {
    color-scheme: light dark;
  }

  [data-theme='dark'] {
    color-scheme: dark;
  }

  [data-theme='light'] {
    color-scheme: light;
  }

  :root {
    --font-size-min: 16;
    --font-size-max: 20;
    --font-ratio-min: 1.2;
    --font-ratio-max: 1.33;
    --font-width-min: 375;
    --font-width-max: 1500;
  }

  :where(.fluid) {
    --fluid-min: calc(
      var(--font-size-min) * pow(var(--font-ratio-min), var(--font-level, 0))
    );
    --fluid-max: calc(
      var(--font-size-max) * pow(var(--font-ratio-max), var(--font-level, 0))
    );
    --fluid-preferred: calc(
      (var(--fluid-max) - var(--fluid-min)) /
        (var(--font-width-max) - var(--font-width-min))
    );
    --fluid-type: clamp(
      (var(--fluid-min) / 16) * 1rem,
      ((var(--fluid-min) / 16) * 1rem) -
        (((var(--fluid-preferred) * var(--font-width-min)) / 16) * 1rem) +
        (var(--fluid-preferred) * var(--variable-unit, 100vi)),
      (var(--fluid-max) / 16) * 1rem
    );
    font-size: var(--fluid-type);
  }

  *,
  *:after,
  *:before {
    box-sizing: border-box;
  }

  body {
    display: grid;
    place-items: center;
    min-height: 100vh;
    font-family: 'SF Pro Text', 'SF Pro Icons', 'AOS Icons', 'Helvetica Neue',
      Helvetica, Arial, sans-serif, system-ui;
  }

  body::before {
    --size: 45px;
    --line: color-mix(in lch, canvasText, transparent 70%);
    content: '';
    height: 100vh;
    width: 100vw;
    position: fixed;
    background: linear-gradient(
          90deg,
          var(--line) 1px,
          transparent 1px var(--size)
        )
        50% 50% / var(--size) var(--size),
      linear-gradient(var(--line) 1px, transparent 1px var(--size)) 50% 50% /
        var(--size) var(--size);
    mask: linear-gradient(-20deg, transparent 50%, white);
    top: 0;
    transform-style: flat;
    pointer-events: none;
    z-index: -1;
  }

  .bear-link {
    color: canvasText;
    position: fixed;
    top: 1rem;
    left: 1rem;
    width: 48px;
    aspect-ratio: 1;
    display: grid;
    place-items: center;
    opacity: 0.8;
  }

  :where(.x-link, .bear-link):is(:hover, :focus-visible) {
    opacity: 1;
  }

  .bear-link svg {
    width: 75%;
  }

  /* Utilities */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
}

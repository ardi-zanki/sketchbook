@import 'normalize.css' layer(normalize);

@layer normalize, base, demo;

@layer demo {
  body {
    overflow: hidden;
  }
  main {
    display: flex;
    flex-direction: column;
    gap: 6rem;
  }
  main > img {
    position: fixed;
    width: 376.5px;
    top: 50%;
    left: 50%;
    translate: -155px -216px;
    translate: -203px -216px;
    translate: -403px -216px;
    opacity: 1;
    z-index: 2;
    clip-path: inset(0 52% 0 0);
  }

  .metal > svg {
    color: hsl(0 0% 94%);
    translate: 0 10%;
    position: relative;
    path {
      transform-box: fill-box;
      transform-origin: 50% 0;
      scale: 0.9;
      filter: drop-shadow(0px -1px 0px hsl(0 0% 48%));
    }
  }

  :root {
    --colors: radial-gradient(
          100% 100% at 50% 50%,
          hsl(140 90% 50% / 0.4),
          #0000 50%
        )
        50% 48% / 300px 108px no-repeat,
      radial-gradient(100% 100% at 50% 50%, hsl(10 90% 50% / 0.4), #0000 50%)
        calc(50% + 300px) 48% / 300px 108px no-repeat,
      radial-gradient(100% 100% at 50% 50%, hsl(210 90% 50% / 0.4), #0000 50%)
        calc(50% - 300px) 48% / 300px 108px no-repeat;
    --reference: radial-gradient(
          100% 100% at 50% 50%,
          hsl(210 90% 70% / 1) 25%,
          #0000 45%
        )
        calc(50% - 300px) 48% / 600px 110px border-box no-repeat,
      radial-gradient(100% 100% at 50% 50%, hsl(140 90% 70% / 1) 25%, #0000 45%)
        50% 48% / 600px 110px border-box no-repeat,
      radial-gradient(100% 100% at 50% 50%, hsl(10 90% 70% / 1) 25%, #0000 45%)
        calc(50% + 300px) 48% / 600px 110px border-box no-repeat;
  }

  main {
    width: 100vw;
    height: 100vh;
    align-items: center;
    justify-content: center;
  }

  main::before {
    content: '';
    position: absolute;
    inset: 0;
    filter: blur(20px);
    background: var(--colors) fixed, var(--reference) fixed;
    background: var(--colors) fixed;
    background-attachment: fixed;
  }

  input {
    width: 300px;
    height: calc(44px + 1rem);
    padding-inline: 0.5rem;
    background: light-dark(white, black);
    border: 0;
    border-radius: 100px;
    outline-color: red;
  }

  .input-wrap {
    position: relative;
  }

  .input-wrap .metal {
    position: absolute;
    right: 0.5rem;
    top: 50%;
    translate: 0 -50%;
    background-blend-mode: normal;
    --reference: linear-gradient(#0000, #0000);
  }

  main > .metal {
    width: 300px;
    height: calc(44px + 1rem);
  }

  .metal {
    width: 44px;
    height: 44px;
    border-radius: 100px;
    cursor: pointer;
    position: relative;

    border: 3px solid transparent;
    outline-color: red;
    outline-offset: 4px;

    box-shadow: 0 0 1px 0 color-mix(in hsl, var(--shade-four), #0000) inset,
      0 10px 14px -10px hsl(0 0% 50%);

    --shade-one: light-dark(hsl(0 0% 10%), hsl(0 0% 78%));
    --shade-two: hsl(0 0% 70%);
    --shade-three: hsl(0 0% 68%);
    --shade-four: hsl(0 0% 98%);
    --shade-five: hsl(0 0% 48%);
    --shade-six: light-dark(hsl(0 0% 26%), hsl(0 0% 68%));
    --shade-seven: hsl(0 0% 50%);

    --border: linear-gradient(var(--shade-one) 50%, var(--shade-two)) border-box;
    --bg-one: linear-gradient(var(--shade-three), var(--shade-three))
      padding-box;
    --bg-two: linear-gradient(
        var(--shade-four) 5%,
        var(--shade-five) 35%,
        var(--shade-six) 50%,
        var(--shade-five) 65%,
        var(--shade-four) 95%
      )
      border-box;
    --radial: radial-gradient(
        160% 110% at 50% 100%,
        var(--shade-seven),
        #0000 60%
      )
      padding-box;

    background: var(--radial), var(--bg-one), var(--reference), var(--bg-two);
    background-attachment: local, local, fixed, fixed, fixed, local;

    &::after {
      content: '';
      position: absolute;
      inset: -3px;
      border: 1px solid #0000;
      border-radius: 100px;
      background: var(--border);
      mask: radial-gradient(#000, #000) padding-box,
        radial-gradient(#000, #000) border-box;
      mask-composite: subtract;
    }
  }
}

@layer base {
  :root {
    --font-size-min: 16;
    --font-size-max: 20;
    --font-ratio-min: 1.2;
    --font-ratio-max: 1.33;
    --font-width-min: 375;
    --font-width-max: 1500;
  }

  html {
    color-scheme: light dark;
  }

  [data-theme='light'] {
    color-scheme: light only;
  }

  [data-theme='dark'] {
    color-scheme: dark only;
  }

  :where(.fluid) {
    --fluid-min: calc(
      var(--font-size-min) * pow(var(--font-ratio-min), var(--font-level, 0))
    );
    --fluid-max: calc(
      var(--font-size-max) * pow(var(--font-ratio-max), var(--font-level, 0))
    );
    --fluid-preferred: calc(
      (var(--fluid-max) - var(--fluid-min)) /
        (var(--font-width-max) - var(--font-width-min))
    );
    --fluid-type: clamp(
      (var(--fluid-min) / 16) * 1rem,
      ((var(--fluid-min) / 16) * 1rem) -
        (((var(--fluid-preferred) * var(--font-width-min)) / 16) * 1rem) +
        (var(--fluid-preferred) * var(--variable-unit, 100vi)),
      (var(--fluid-max) / 16) * 1rem
    );
    font-size: var(--fluid-type);
  }

  *,
  *:after,
  *:before {
    box-sizing: border-box;
  }

  body {
    display: grid;
    place-items: center;
    min-height: 100vh;
    font-family: 'SF Pro Text', 'SF Pro Icons', 'AOS Icons', 'Helvetica Neue',
      Helvetica, Arial, sans-serif, system-ui;
    background: color-mix(in hsl, canvas, canvasText 6%);
  }

  body::before {
    --size: 45px;
    --line: color-mix(in lch, canvasText, transparent 70%);
    content: '';
    height: 100vh;
    width: 100vw;
    position: fixed;
    background: linear-gradient(
          90deg,
          var(--line) 1px,
          transparent 1px var(--size)
        )
        50% 50% / var(--size) var(--size),
      linear-gradient(var(--line) 1px, transparent 1px var(--size)) 50% 50% /
        var(--size) var(--size);
    mask: linear-gradient(-20deg, transparent 50%, white);
    top: 0;
    transform-style: flat;
    pointer-events: none;
    z-index: -1;
  }

  .bear-link {
    color: canvasText;
    position: fixed;
    top: 1rem;
    left: 1rem;
    width: 48px;
    aspect-ratio: 1;
    display: grid;
    place-items: center;
    opacity: 0.8;
  }

  :where(.x-link, .bear-link):is(:hover, :focus-visible) {
    opacity: 1;
  }

  .bear-link svg {
    width: 75%;
  }

  /* Utilities */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
}

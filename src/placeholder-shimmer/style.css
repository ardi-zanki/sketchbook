@import url('https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap');
@import 'normalize.css' layer(normalize);

@layer normalize, base, demo;

@layer demo {
  [data-style='classic'] {
    --chosen: var(--classic);
  }
  [data-style='flame'] {
    --chosen: var(--flame);
  }
  [data-style='aurora'] {
    --chosen: var(--aurora);
  }
  [data-style='change'] {
    --chosen: var(--changing);
  }

  :root {
    --start: 120;
    --end: 280;
  }

  @property --hue {
    initial-value: 10;
    syntax: '<number>';
    inherits: true;
  }

  [data-style='change'][data-debug='false'] {
    animation: hue calc(var(--duration) * 0.5) infinite both linear;
  }

  @keyframes hue {
    0%,
    15% {
      --hue: 120;
    }
    85%,
    100% {
      --hue: 280;
    }
  }

  [data-debug='true'] {
    --hue: calc(
      var(--end) +
        (
          clamp(0.15, var(--bg-position) / 100, 0.85) *
            (var(--start) - var(--end))
        )
    );
  }

  :root {
    --duration: calc((var(--multiplier, 0.2) * var(--placeholder-length)) * 2s);
    --place-color: light-dark(
      color-mix(in hsl, canvas, canvasText 20%),
      color-mix(in hsl, canvas, canvasText 20%)
    );
    --offset: calc(var(--bg-spread, 6) * 0.5ch);
    --angle: calc(var(--bg-angle) * 1deg);
    --flame: linear-gradient(
      var(--angle),
      #0000 calc(50% - var(--offset)),
      hsl(45 100% 60%) calc(50% - (var(--offset) - 0.5ch)),
      hsl(0 100% 50%),
      #0000 calc(50% + var(--offset))
    );
    --aurora: linear-gradient(
      var(--angle),
      #0000 calc(50% - var(--offset)),
      #a960ee,
      #ff333d,
      #ffcb57,
      #90e0ff,
      #0000 calc(50% + var(--offset))
    );
    --changing: linear-gradient(
      var(--angle),
      #0000 calc(50% - var(--offset)),
      hsl(var(--hue) 90% 60%),
      #0000 calc(50% + var(--offset))
    );
    --classic: linear-gradient(
      var(--angle),
      #0000 calc(50% - var(--offset)),
      canvasText,
      #0000 calc(50% + var(--offset))
    );
    --bg: var(--chosen) 0 0 / 300% 100% no-repeat border-box,
      linear-gradient(var(--place-color), var(--place-color)) padding-box;
  }

  .wrap input {
    width: 290px;
    max-width: calc(100vw - 2rem);
  }

  .wrap {
    --font-level: 0;
    --font-size-min: 14;
    --font-size-max: 22;
    font-weight: 500;
    font-family: 'Ubuntu', sans-serif;
    display: flex;
    flex-direction: column;
    position: relative;
    gap: 2rem;
  }

  .wrap :is(.debugger, .placeholder, input) {
    padding: 16px;
    border-radius: 12px;
  }

  .wrap :is(.debugger, .placeholder) {
    border: 2px solid #0000;
    background: var(--bg);
    position: absolute;
    height: 100%;
    width: 100%;
    pointer-events: none;
    transition: top 0.2s, bottom 0.2s;
  }

  input::placeholder {
    font-weight: 500;
    transition: opacity 0.2s;
  }

  .debugger {
    top: 0;
  }
  .placeholder {
    bottom: 0;
  }

  .placeholder::before,
  .placeholder::after {
    opacity: 0;
  }

  .placeholder::before {
    content: attr(data-placeholder);
    background: var(--bg);
    background-clip: text;
    color: transparent;
    position: absolute;
    inset: 0;
    padding: 1rem;
  }

  [data-bordered='true'] .placeholder::after {
    content: '';
    border: 2px solid #0000;
    position: absolute;
    inset: -2px;
    border-radius: 12px;
    background: var(--bg);
    mask: linear-gradient(#0000, #0000) padding-box,
      linear-gradient(#fff, #fff) border-box;
    mask-composite: intersect;
    transition: opacity 0.2s;
  }

  [data-debug='false'] .wrap input::placeholder {
    opacity: 0;
  }

  [data-debug='true'] .placeholder::after,
  [data-debug='true'] .placeholder::before,
  [data-debug='false'] input:placeholder-shown + .placeholder::after,
  [data-debug='false'] input:placeholder-shown + .placeholder::before {
    opacity: 1;
  }

  [data-debug='true'] .debugger {
    top: calc(100% + 2rem);
  }
  [data-debug='true'] .placeholder {
    bottom: calc(100% + 2rem);
  }

  .debugger {
    z-index: -1;
  }

  .wrap input {
    background: light-dark(#fff, #000);
    border: 2px solid var(--place-color);

    &::selection {
      background-color: red;
      color: white;
    }

    &::placeholder {
      color: var(--place-color);
    }

    &:focus-visible {
      outline: 2px solid #0000;
    }
  }

  [data-debug='false'] .placeholder::before,
  [data-debug='false'] .placeholder::after {
    animation: shimmer var(--duration) infinite both ease-in-out;
  }

  .labels {
    opacity: 0;
    filter: blur(4px);
    position: absolute;
    display: flex;
    flex-direction: column;
    right: calc(100% + 2rem);
    top: 50%;
    translate: 0 -50%;
    gap: 2rem;
    font-weight: 300;
    transition: opacity 0.2s, filter 0.2s;
  }

  [data-debug='true'] .labels {
    opacity: 1;
    filter: blur(0px);
  }

  .label {
    padding-block: 1.1rem;
    font-size: 0.8rem;
    opacity: 0.5;
  }

  @keyframes shimmer {
    0% {
      background-position: 100% 0;
    }
    50%,
    100% {
      background-position: 0% 0;
    }
  }

  .wrap .placeholder {
    background-clip: text;
    color: transparent;
  }

  [data-debug='true'] .wrap .placeholder::after,
  [data-debug='true'] .wrap .placeholder::before,
  [data-debug='true'] .wrap .debugger {
    background-position: calc(var(--bg-position) * 1%);
  }
}

@layer base {
  :root {
    --font-size-min: 16;
    --font-size-max: 20;
    --font-ratio-min: 1.2;
    --font-ratio-max: 1.33;
    --font-width-min: 375;
    --font-width-max: 1500;
  }

  html {
    color-scheme: light dark;
  }

  [data-theme='light'] {
    color-scheme: light only;
  }

  [data-theme='dark'] {
    color-scheme: dark only;
  }

  :where(.fluid) {
    --fluid-min: calc(
      var(--font-size-min) * pow(var(--font-ratio-min), var(--font-level, 0))
    );
    --fluid-max: calc(
      var(--font-size-max) * pow(var(--font-ratio-max), var(--font-level, 0))
    );
    --fluid-preferred: calc(
      (var(--fluid-max) - var(--fluid-min)) /
        (var(--font-width-max) - var(--font-width-min))
    );
    --fluid-type: clamp(
      (var(--fluid-min) / 16) * 1rem,
      ((var(--fluid-min) / 16) * 1rem) -
        (((var(--fluid-preferred) * var(--font-width-min)) / 16) * 1rem) +
        (var(--fluid-preferred) * var(--variable-unit, 100vi)),
      (var(--fluid-max) / 16) * 1rem
    );
    font-size: var(--fluid-type);
  }

  *,
  *:after,
  *:before {
    box-sizing: border-box;
  }

  body {
    display: grid;
    place-items: center;
    min-height: 100vh;
    font-family: 'SF Pro Text', 'SF Pro Icons', 'AOS Icons', 'Helvetica Neue',
      Helvetica, Arial, sans-serif, system-ui;
  }

  body::before {
    --size: 45px;
    --line: color-mix(in lch, canvasText, transparent 70%);
    content: '';
    height: 100vh;
    width: 100vw;
    position: fixed;
    background: linear-gradient(
          90deg,
          var(--line) 1px,
          transparent 1px var(--size)
        )
        50% 50% / var(--size) var(--size),
      linear-gradient(var(--line) 1px, transparent 1px var(--size)) 50% 50% /
        var(--size) var(--size);
    mask: linear-gradient(-20deg, transparent 50%, white);
    top: 0;
    transform-style: flat;
    pointer-events: none;
    z-index: -1;
  }

  .bear-link {
    color: canvasText;
    position: fixed;
    top: 1rem;
    left: 1rem;
    width: 48px;
    aspect-ratio: 1;
    display: grid;
    place-items: center;
    opacity: 0.8;
  }

  :where(.x-link, .bear-link):is(:hover, :focus-visible) {
    opacity: 1;
  }

  .bear-link svg {
    width: 75%;
  }

  /* Utilities */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
}

div.tp-dfwv {
  width: 270px;
}
